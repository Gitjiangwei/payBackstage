<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.hero.renche.mapper.PurchaseInfoMapper">

    
    <select id="qryListPurchaseInfo" resultType="org.hero.renche.entity.vo.PurchaseInfoVo">

        select a.task_id,t.task_name, purchase_id as purchaseId,a.material_id as materialId,material_name as materialName,material_no as materialNo,material_type as materialType,
        material_unit as materialUnit,price,quantity,purchaser,purchase_time as purchaseTime,which_company as whichCompany,c.company_name as companyName,
        isarrival,isarrival,arrival_time as arrivalTime,s.realname as createUserName,total_price as totalPrice,ifnull(a.file_rel_id,'') as fileRelId,
        have_way as haveWay,expiration_date as expirationDate,isstorage,a.remark
        from tx_purchase_info a
        left join tx_material_info m on m.material_id = a.material_id
        left join tx_company_info c on c.company_id = a.which_company
        left join sys_user s on s.id = a.create_user
        left join tx_task_info t on t.task_id = a.task_id
        <trim prefix="where" prefixOverrides="and">
            <if test="PurchaseInfoVo.haveWay != null and PurchaseInfoVo.haveWay != '' ">
                and have_way = #{PurchaseInfoVo.haveWay}
            </if>
            <if test="PurchaseInfoVo.materialName != null and PurchaseInfoVo.materialName != '' ">
                and m.material_name like CONCAT('%',#{PurchaseInfoVo.materialName},'%')
            </if>
            <if test="PurchaseInfoVo.materialType != null and PurchaseInfoVo.materialType != '' ">
                and m.material_type like CONCAT('%',#{PurchaseInfoVo.materialType},'%')
            </if>
            <if test="PurchaseInfoVo.purchaser != null and PurchaseInfoVo.purchaser != '' ">
                and  purchaser  like CONCAT('%',#{PurchaseInfoVo.purchaser},'%')
            </if>
            <if test="PurchaseInfoVo.isarrival != null and PurchaseInfoVo.isarrival != '' ">
                and  isarrival = #{PurchaseInfoVo.isarrival}
            </if>
            <if test="PurchaseInfoVo.isstorage != null and PurchaseInfoVo.isstorage != '' ">
                and  isstorage = #{PurchaseInfoVo.isstorage}
            </if>
            <if test="PurchaseInfoVo.purchaseTime != null and PurchaseInfoVo.purchaseTime != '' ">
                and  purchase_time = #{PurchaseInfoVo.purchaseTime}
            </if>
            <if test="PurchaseInfoVo.purchaseId != null and PurchaseInfoVo.purchaseId != '' ">
                and  purchase_id = #{PurchaseInfo.purchaseId}
            </if>
        </trim>
        order by a.create_time desc
    </select>

    <update id="updatePurchaseByIds">
        UPDATE tx_purchase_info set isarrival = '1',arrival_time = NOW()
        where purchase_id in
        <foreach collection="list" item="purchaseByIds" open="(" close=")" separator=",">
            #{purchaseByIds}
        </foreach> and isarrival != '1'
    </update>

    <insert id="insertReceiving">

        insert into tx_equip_info(equip_id,material_id,have_way,expiration_date,equip_no,equip_price,purchase_id,create_time)
        VALUES
        <foreach collection="list" item="equipList"  separator=")," >
            (#{equipList.equipId},#{equipList.materialId},#{equipList.haveWay},#{equipList.expirationDate},#{equipList.equipNo},#{equipList.equipPrice},#{equipList.purchaseId},sysdate()
        </foreach> )
    </insert>

    <select id="qryPurchaseInfoKey" resultType="String">
        select isstorage from tx_purchase_info where purchase_Id=#{purchaseId}
    </select>

    <update id="updatePurchaseKey">
         UPDATE tx_purchase_info set isstorage = '1'
         where purchase_id=#{purchaseById}
    </update>

    <update id="updateFileIds">
           update tx_purchase_info set  file_rel_id = #{purchaseInfo.fileRelId}
            where purchase_id = #{purchaseInfo.purchaseId}
    </update>

</mapper>
